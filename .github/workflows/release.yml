name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.3 - without v prefix)'
        required: true
        type: string
      version_type:
        description: 'Type of version bump'
        required: false
        default: 'manual'
        type: choice
        options:
        - manual
        - patch
        - minor
        - major
      create_tag:
        description: 'Create and push git tag'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  version-bump:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml semver
    
    - name: Calculate new version
      id: version
      run: |
        python << 'EOF'
        import toml
        import re
        import os
        from pathlib import Path
        
        def get_current_version():
            """Get current version from pyproject.toml"""
            with open('pyproject.toml', 'r') as f:
                data = toml.load(f)
            return data['project']['version']
        
        def bump_version(current, bump_type):
            """Bump version based on type"""
            parts = [int(x) for x in current.split('.')]
            if bump_type == 'major':
                return f"{parts[0] + 1}.0.0"
            elif bump_type == 'minor':
                return f"{parts[0]}.{parts[1] + 1}.0"
            elif bump_type == 'patch':
                return f"{parts[0]}.{parts[1]}.{parts[2] + 1}"
            return current
        
        def update_version_in_file(file_path, new_version):
            """Update version in a file"""
            content = Path(file_path).read_text()
            if file_path.endswith('.toml'):
                # Handle TOML files
                content = re.sub(r'version\s*=\s*"[^"]+"', f'version = "{new_version}"', content, count=1)
            Path(file_path).write_text(content)
        
        # Get inputs
        manual_version = os.getenv('MANUAL_VERSION', '').strip()
        version_type = os.getenv('VERSION_TYPE', 'manual').strip()
        
        # Calculate new version
        current_version = get_current_version()
        print(f"Current version: {current_version}")
        
        if version_type == 'manual' and manual_version:
            new_version = manual_version
        else:
            new_version = bump_version(current_version, version_type)
        
        print(f"New version: {new_version}")
        
        # Update version in files
        update_version_in_file('pyproject.toml', new_version)
        update_version_in_file('Cargo.toml', new_version)
        
        # Set outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"new_version={new_version}\n")
            f.write(f"tag_name=v{new_version}\n")
        EOF
      env:
        MANUAL_VERSION: ${{ github.event.inputs.version }}
        VERSION_TYPE: ${{ github.event.inputs.version_type }}
    
    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml Cargo.toml
        git commit -m "Bump version to ${{ steps.version.outputs.new_version }}" || exit 0
        git push
    
    - name: Create and push tag
      if: github.event.inputs.create_tag == 'true'
      run: |
        git tag ${{ steps.version.outputs.tag_name }}
        git push origin ${{ steps.version.outputs.tag_name }}
  linux:
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && (startsWith(github.ref, 'refs/tags/') || needs.version-bump.result == 'success')
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto
        rust-toolchain: stable
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-${{ matrix.target }}
        path: dist

  windows:
    runs-on: windows-latest
    needs: [version-bump]
    if: always() && (startsWith(github.ref, 'refs/tags/') || needs.version-bump.result == 'success')
    strategy:
      matrix:
        target: [x64, x86]
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: ${{ matrix.target }}
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        rust-toolchain: stable
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-windows-${{ matrix.target }}
        path: dist

  macos:
    runs-on: macos-latest
    needs: [version-bump]
    if: always() && (startsWith(github.ref, 'refs/tags/') || needs.version-bump.result == 'success')
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        rust-toolchain: stable
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-macos-${{ matrix.target }}
        path: dist

  musllinux:
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && (startsWith(github.ref, 'refs/tags/') || needs.version-bump.result == 'success')
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: musllinux_1_2
        rust-toolchain: stable
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-musllinux-${{ matrix.target }}
        path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && (startsWith(github.ref, 'refs/tags/') || needs.version-bump.result == 'success')
    steps:
    - uses: actions/checkout@v4
    
    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: dist

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [version-bump, linux, windows, macos, musllinux, sdist]
    if: always() && (needs.linux.result == 'success' && needs.windows.result == 'success' && needs.macos.result == 'success' && needs.musllinux.result == 'success' && needs.sdist.result == 'success')
    permissions:
      id-token: write  # For trusted publishing to PyPI
      contents: write  # For creating GitHub releases
    environment:
      name: pypi
      url: https://pypi.org/p/bm25-rs
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true
    
    - name: List built wheels
      run: ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false